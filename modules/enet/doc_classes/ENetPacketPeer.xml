<?xml version="1.0" encoding="UTF-8" ?>
<class name="ENetPacketPeer" inherits="PacketPeer" version="4.0">
	<brief_description>
		A wrapper class for an [url=http://enet.bespin.org/group__peer.html]ENetPeer[/url].
	</brief_description>
	<description>
		A PacketPeer implementation representing a peer of an [ENetConnection].
		This class cannot be instantiated directly but can be retrieved during [method ENetConnection.service] or via [method ENetConnection.get_peers].
		[b]Note:[/b] When exporting to Android, make sure to enable the [code]INTERNET[/code] permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	</description>
	<tutorials>
		<link title="API documentation on the ENet website">http://enet.bespin.org/usergroup0.html</link>
	</tutorials>
	<methods>
		<method name="get_channels" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of channels allocated for communication with peer.
			</description>
		</method>
		<method name="get_state" qualifiers="const">
			<return type="int" enum="ENetPacketPeer.PeerState" />
			<description>
				Returns the current peer state. See [enum PeerState].
			</description>
		</method>
		<method name="get_statistic">
			<return type="float" />
			<argument index="0" name="statistic" type="int" enum="ENetPacketPeer.PeerStatistic" />
			<description>
				Returns the requested [code]statistic[/code] for this peer. See [enum PeerStatistic].
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the peer is currently active (i.e. the associated [ENetConnection] is still valid).
			</description>
		</method>
		<method name="peer_disconnect">
			<return type="void" />
			<argument index="0" name="data" type="int" default="0" />
			<description>
				Request a disconnection from a peer. An [constant ENetConnection.EVENT_DISCONNECT] will be generated during [method ENetConnection.service] once the disconnection is complete.
			</description>
		</method>
		<method name="peer_disconnect_later">
			<return type="void" />
			<argument index="0" name="data" type="int" default="0" />
			<description>
				Request a disconnection from a peer, but only after all queued outgoing packets are sent. An [constant ENetConnection.EVENT_DISCONNECT] will be generated during [method ENetConnection.service] once the disconnection is complete.
			</description>
		</method>
		<method name="peer_disconnect_now">
			<return type="void" />
			<argument index="0" name="data" type="int" default="0" />
			<description>
				Force an immediate disconnection from a peer. No [constant ENetConnection.EVENT_DISCONNECT] will be generated. The foreign peer is not guaranteed to receive the disconnect notification, and is reset immediately upon return from this function.
			</description>
		</method>
		<method name="ping">
			<return type="void" />
			<description>
				Sends a ping request to a peer. ENet automatically pings all connected peers at regular intervals, however, this function may be called to ensure more frequent ping requests.
			</description>
		</method>
		<method name="ping_interval">
			<return type="void" />
			<argument index="0" name="ping_interval" type="int" />
			<description>
				Sets the [code]ping_interval[/code] in milliseconds at which pings will be sent to a peer. Pings are used both to monitor the liveness of the connection and also to dynamically adjust the throttle during periods of low traffic so that the throttle has reasonable responsiveness during traffic spikes.
			</description>
		</method>
		<method name="reset">
			<return type="void" />
			<description>
				Forcefully disconnects a peer. The foreign host represented by the peer is not notified of the disconnection and will timeout on its connection to the local host.
			</description>
		</method>
		<method name="send">
			<return type="int" enum="Error" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="packet" type="PackedByteArray" />
			<argument index="2" name="flags" type="int" />
			<description>
				Queues a [code]packet[/code] to be sent over the specified [code]channel[/code]. See [code]FLAG_*[/code] constants for available packet flags.
			</description>
		</method>
		<method name="set_timeout">
			<return type="void" />
			<argument index="0" name="timeout" type="int" />
			<argument index="1" name="timeout_min" type="int" />
			<argument index="2" name="timeout_max" type="int" />
			<description>
				Sets the timeout parameters for a peer. The timeout parameters control how and when a peer will timeout from a failure to acknowledge reliable traffic. Timeout values are expressed in milliseconds.
				The [code]timeout_limit[/code] is a factor that, multiplied by a value based on the average round trip time, will determine the timeout limit for a reliable packet. When that limit is reached, the timeout will be doubled, and the peer will be disconnected if that limit has reached [code]timeout_min[/code]. The [code]timeout_max[/code] parameter, on the other hand, defines a fixed timeout for which any packet must be acknowledged or the peer will be dropped.
			</description>
		</method>
		<method name="throttle_configure">
			<return type="void" />
			<argument index="0" name="interval" type="int" />
			<argument index="1" name="acceleration" type="int" />
			<argument index="2" name="deceleration" type="int" />
			<description>
				Configures throttle parameter for a peer.
				Unreliable packets are dropped by ENet in response to the varying conditions of the Internet connection to the peer. The throttle represents a probability that an unreliable packet should not be dropped and thus sent by ENet to the peer. By measuring fluctuations in round trip times of reliable packets over the specified [code]interval[/code], ENet will either increase the probably by the amount specified in the [code]acceleration[/code] parameter, or decrease it by the amount specified in the [code]deceleration[/code] parameter (both are ratios to [constant PACKET_THROTTLE_SCALE]).
				When the throttle has a value of [constant PACKET_THROTTLE_SCALE], no unreliable packets are dropped by ENet, and so 100% of all unreliable packets will be sent.
				When the throttle has a value of 0, all unreliable packets are dropped by ENet, and so 0% of all unreliable packets will be sent.
				Intermediate values for the throttle represent intermediate probabilities between 0% and 100% of unreliable packets being sent. The bandwidth limits of the local and foreign hosts are taken into account to determine a sensible limit for the throttle probability above which it should not raise even in the best of conditions.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="STATE_DISCONNECTED" value="0" enum="PeerState">
		</constant>
		<constant name="STATE_CONNECTING" value="1" enum="PeerState">
		</constant>
		<constant name="STATE_ACKNOWLEDGING_CONNECT" value="2" enum="PeerState">
		</constant>
		<constant name="STATE_CONNECTION_PENDING" value="3" enum="PeerState">
		</constant>
		<constant name="STATE_CONNECTION_SUCCEEDED" value="4" enum="PeerState">
		</constant>
		<constant name="STATE_CONNECTED" value="5" enum="PeerState">
		</constant>
		<constant name="STATE_DISCONNECT_LATER" value="6" enum="PeerState">
		</constant>
		<constant name="STATE_DISCONNECTING" value="7" enum="PeerState">
		</constant>
		<constant name="STATE_ACKNOWLEDGING_DISCONNECT" value="8" enum="PeerState">
		</constant>
		<constant name="STATE_ZOMBIE" value="9" enum="PeerState">
		</constant>
		<constant name="PEER_PACKET_LOSS" value="0" enum="PeerStatistic">
			Mean packet loss of reliable packets as a ratio with respect to the [constant PACKET_LOSS_SCALE].
		</constant>
		<constant name="PEER_PACKET_LOSS_VARIANCE" value="1" enum="PeerStatistic">
			Packet loss variance.
		</constant>
		<constant name="PEER_PACKET_LOSS_EPOCH" value="2" enum="PeerStatistic">
		</constant>
		<constant name="PEER_ROUND_TRIP_TIME" value="3" enum="PeerStatistic">
			Mean packet round trip time for reliable packets.
		</constant>
		<constant name="PEER_ROUND_TRIP_TIME_VARIANCE" value="4" enum="PeerStatistic">
			Variance of the mean round trip time.
		</constant>
		<constant name="PEER_LAST_ROUND_TRIP_TIME" value="5" enum="PeerStatistic">
			Last recorded round trip time for a reliable packet.
		</constant>
		<constant name="PEER_LAST_ROUND_TRIP_TIME_VARIANCE" value="6" enum="PeerStatistic">
			Variance of the last trip time recorded.
		</constant>
		<constant name="PEER_PACKET_THROTTLE" value="7" enum="PeerStatistic">
		</constant>
		<constant name="PEER_PACKET_THROTTLE_LIMIT" value="8" enum="PeerStatistic">
		</constant>
		<constant name="PEER_PACKET_THROTTLE_COUNTER" value="9" enum="PeerStatistic">
		</constant>
		<constant name="PEER_PACKET_THROTTLE_EPOCH" value="10" enum="PeerStatistic">
		</constant>
		<constant name="PEER_PACKET_THROTTLE_ACCELERATION" value="11" enum="PeerStatistic">
		</constant>
		<constant name="PEER_PACKET_THROTTLE_DECELERATION" value="12" enum="PeerStatistic">
		</constant>
		<constant name="PEER_PACKET_THROTTLE_INTERVAL" value="13" enum="PeerStatistic">
		</constant>
		<constant name="PACKET_LOSS_SCALE" value="65536">
			The reference scale for packet loss. See [method get_statistic] and [constant PEER_PACKET_LOSS].
		</constant>
		<constant name="PACKET_THROTTLE_SCALE" value="32">
			The reference value for throttle configuration. See [method throttle_configure].
		</constant>
		<constant name="FLAG_RELIABLE" value="1">
			Mark the packet to be sent as reliable.
		</constant>
		<constant name="FLAG_UNSEQUENCED" value="2">
			Mark the packet to be sent unsequenced (unreliable).
		</constant>
		<constant name="FLAG_UNRELIABLE_FRAGMENT" value="8">
			Mark the packet to be sent unreliable even if the packet is too big and needs fragmentation (increasing the chance of it being dropped).
		</constant>
	</constants>
</class>
