<?xml version="1.0" encoding="UTF-8" ?>
<class name="XRController3D" inherits="XRNode3D" version="4.0">
	<brief_description>
		A spatial node representing a spatially-tracked controller.
	</brief_description>
	<description>
		This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers.
		Controllers are linked by their ID. You can create controller nodes before the controllers are available. If your game always uses two controllers (one for each hand), you can predefine the controllers with ID 1 and 2; they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add XRController3D nodes to your scene.
		The position of the controller node is automatically updated by the [XRServer]. This makes this node ideal to add child nodes to visualize the controller.
		As many XR runtimes now use a configurable action map all inputs are named.
	</description>
	<tutorials>
		<link title="VR documentation index">https://docs.godotengine.org/en/latest/tutorials/vr/index.html</link>
	</tutorials>
	<methods>
		<method name="get_axis" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="name" type="StringName" />
			<description>
				Returns a [Vector2] for the input with the given [code]name[/code]. This is used for thumbsticks and thumbpads found on many controllers.
			</description>
		</method>
		<method name="get_tracker_hand" qualifiers="const">
			<return type="int" enum="XRPositionalTracker.TrackerHand" />
			<description>
				Returns the hand holding this controller, if known. See [enum XRPositionalTracker.TrackerHand].
			</description>
		</method>
		<method name="get_value" qualifiers="const">
			<return type="float" />
			<argument index="0" name="name" type="StringName" />
			<description>
				Returns a numeric value for the input with the given [code]name[/code]. This is used for triggers and grip sensors.
			</description>
		</method>
		<method name="is_button_pressed" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="StringName" />
			<description>
				Returns [code]true[/code] if the button with the given [code]name[/code] is pressed.
			</description>
		</method>
	</methods>
	<members>
		<member name="rumble" type="float" setter="set_rumble" getter="get_rumble" default="0.0">
			The degree to which the controller vibrates. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code]. If changed, updates [member XRPositionalTracker.rumble] accordingly.
			This is a useful property to animate if you want the controller to vibrate for a limited duration.
		</member>
	</members>
	<signals>
		<signal name="button_pressed">
			<argument index="0" name="name" type="String" />
			<description>
				Emitted when a button on this controller is pressed.
			</description>
		</signal>
		<signal name="button_released">
			<argument index="0" name="name" type="String" />
			<description>
				Emitted when a button on this controller is released.
			</description>
		</signal>
		<signal name="input_axis_changed">
			<argument index="0" name="name" type="String" />
			<argument index="1" name="value" type="Vector2" />
			<description>
				Emitted when a thumbstick or thumbpad on this controller is moved.
			</description>
		</signal>
		<signal name="input_value_changed">
			<argument index="0" name="name" type="String" />
			<argument index="1" name="value" type="float" />
			<description>
				Emitted when a trigger or similar input on this controller changes value.
			</description>
		</signal>
	</signals>
</class>
