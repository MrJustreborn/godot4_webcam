<?xml version="1.0" encoding="UTF-8" ?>
<class name="Array" version="4.0">
	<brief_description>
		A generic array datatype.
	</brief_description>
	<description>
		A generic array that can contain several elements of any type, accessible by a numerical index starting at 0. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 is the second to last, etc.).
		[b]Example:[/b]
		[codeblocks]
		[gdscript]
		var array = ["One", 2, 3, "Four"]
		print(array[0]) # One.
		print(array[2]) # 3.
		print(array[-1]) # Four.
		array[2] = "Three"
		print(array[-2]) # Three.
		[/gdscript]
		[csharp]
		var array = new Godot.Collections.Array{"One", 2, 3, "Four"};
		GD.Print(array[0]); // One.
		GD.Print(array[2]); // 3.
		GD.Print(array[array.Count - 1]); // Four.
		array[2] = "Three";
		GD.Print(array[array.Count - 2]); // Three.
		[/csharp]
		[/codeblocks]
		Arrays can be concatenated using the [code]+[/code] operator:
		[codeblocks]
		[gdscript]
		var array1 = ["One", 2]
		var array2 = [3, "Four"]
		print(array1 + array2) # ["One", 2, 3, "Four"]
		[/gdscript]
		[csharp]
		// Array concatenation is not possible with C# arrays, but is with Godot.Collections.Array.
		var array1 = new Godot.Collections.Array{"One", 2};
		var array2 = new Godot.Collections.Array{3, "Four"};
		GD.Print(array1 + array2); // Prints [One, 2, 3, Four]
		[/csharp]
		[/codeblocks]
		[b]Note:[/b] Concatenating with the [code]+=[/code] operator will create a new array, which has a cost. If you want to append another array to an existing array, [method append_array] is more efficient.
		[b]Note:[/b] Arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use [method duplicate].
		[b]Note:[/b] When declaring an array with [code]const[/code], the array itself can still be mutated by defining the values at individual indices or pushing/removing elements. Using [code]const[/code] will only prevent assigning the constant with another value after it was initialized.
	</description>
	<tutorials>
	</tutorials>
	<constructors>
		<constructor name="Array">
			<return type="Array" />
			<description>
				Constructs an empty [Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="Array" />
			<description>
				Constructs an [Array] as a copy of the given [Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedByteArray" />
			<description>
				Constructs an array from a [PackedByteArray].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedColorArray" />
			<description>
				Constructs an array from a [PackedColorArray].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedFloat32Array" />
			<description>
				Constructs an array from a [PackedFloat32Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedFloat64Array" />
			<description>
				Constructs an array from a [PackedFloat64Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedInt32Array" />
			<description>
				Constructs an array from a [PackedInt32Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedInt64Array" />
			<description>
				Constructs an array from a [PackedInt64Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedStringArray" />
			<description>
				Constructs an array from a [PackedStringArray].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedVector2Array" />
			<description>
				Constructs an array from a [PackedVector2Array].
			</description>
		</constructor>
		<constructor name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PackedVector3Array" />
			<description>
				Constructs an array from a [PackedVector3Array].
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="append">
			<return type="void" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<return type="void" />
			<argument index="0" name="array" type="Array" />
			<description>
				Appends another array at the end of this array.
				[codeblock]
				var array1 = [1, 2, 3]
				var array2 = [4, 5, 6]
				array1.append_array(array2)
				print(array1) # Prints [1, 2, 3, 4, 5, 6].
				[/codeblock]
			</description>
		</method>
		<method name="back" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the last element of the array. Prints an error and returns [code]null[/code] if the array is empty.
				[b]Note:[/b] Calling this function is not the same as writing [code]array[-1][/code]. If the array is empty, accessing by index will pause project execution when running from the editor.
			</description>
		</method>
		<method name="bsearch">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<argument index="1" name="before" type="bool" default="true" />
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array.
				[b]Note:[/b] Calling [method bsearch] on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="bsearch_custom">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<argument index="1" name="func" type="Callable" />
			<argument index="2" name="before" type="bool" default="true" />
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return [code]true[/code] if the first argument is less than the second, and return [code]false[/code] otherwise.
				[b]Note:[/b] Calling [method bsearch_custom] on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears the array. This is equivalent to using [method resize] with a size of [code]0[/code].
			</description>
		</method>
		<method name="count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Returns the number of times an element is in the array.
			</description>
		</method>
		<method name="duplicate" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="deep" type="bool" default="false" />
			<description>
				Returns a copy of the array.
				If [code]deep[/code] is [code]true[/code], a deep copy is performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If [code]false[/code], a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array.
			</description>
		</method>
		<method name="erase">
			<return type="void" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Removes the first occurrence of a value from the array. To remove an element by index, use [method remove] instead.
				[b]Note:[/b] This method acts in-place and doesn't return a value.
				[b]Note:[/b] On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.
			</description>
		</method>
		<method name="fill">
			<return type="void" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Assigns the given value to all elements in the array. This can typically be used together with [method resize] to create an array with a given size and initialized elements:
				[codeblocks]
				[gdscript]
				var array = []
				array.resize(10)
				array.fill(0) # Initialize the 10 elements to 0.
				[/gdscript]
				[csharp]
				var array = new Godot.Collections.Array{};
				array.Resize(10);
				array.Fill(0); // Initialize the 10 elements to 0.
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="filter" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="method" type="Callable" />
			<description>
				Calls the provided [Callable] on each element in the array and returns a new array with the elements for which the method returned [code]true[/code].
				The callable's method should take one [Variant] parameter (the current array element) and return a boolean value.
				[codeblock]
				func _ready():
				    print([1, 2, 3].filter(remove_1)) # Prints [2, 3].
				    print([1, 2, 3].filter(func(number): return number != 1)) # Same as above, but using lambda function.

				func remove_1(number):
				    return number != 1
				[/codeblock]
			</description>
		</method>
		<method name="find" qualifiers="const">
			<return type="int" />
			<argument index="0" name="what" type="Variant" />
			<argument index="1" name="from" type="int" default="0" />
			<description>
				Searches the array for a value and returns its index or [code]-1[/code] if not found. Optionally, the initial search index can be passed.
			</description>
		</method>
		<method name="find_last" qualifiers="const">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Searches the array in reverse order for a value and returns its index or [code]-1[/code] if not found.
			</description>
		</method>
		<method name="front" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the first element of the array. Prints an error and returns [code]null[/code] if the array is empty.
				[b]Note:[/b] Calling this function is not the same as writing [code]array[0][/code]. If the array is empty, accessing by index will pause project execution when running from the editor.
			</description>
		</method>
		<method name="has" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Returns [code]true[/code] if the array contains the given value.
				[codeblocks]
				[gdscript]
				print(["inside", 7].has("inside")) # True
				print(["inside", 7].has("outside")) # False
				print(["inside", 7].has(7)) # True
				print(["inside", 7].has("7")) # False
				[/gdscript]
				[csharp]
				var arr = new Godot.Collections.Array{"inside", 7};
				// has is renamed to Contains
				GD.Print(arr.Contains("inside")); // True
				GD.Print(arr.Contains("outside")); // False
				GD.Print(arr.Contains(7)); // True
				GD.Print(arr.Contains("7")); // False
				[/csharp]
				[/codeblocks]

				[b]Note:[/b] This is equivalent to using the [code]in[/code] operator as follows:
				[codeblocks]
				[gdscript]
				# Will evaluate to `true`.
				if 2 in [2, 4, 6, 8]:
				    print("Contains!")
				[/gdscript]
				[csharp]
				// As there is no "in" keyword in C#, you have to use Contains
				var array = new Godot.Collections.Array{2, 4, 6, 8};
				if (array.Contains(2))
				{
				    GD.Print("Contains!");
				}
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="hash" qualifiers="const">
			<return type="int" />
			<description>
				Returns a hashed integer value representing the array and its contents.
				[b]Note:[/b] Arrays with equal contents can still produce different hashes. Only the exact same arrays will produce the same hashed integer value.
			</description>
		</method>
		<method name="insert">
			<return type="int" />
			<argument index="0" name="position" type="int" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]pos == size()[/code]).
				[b]Note:[/b] This method acts in-place and doesn't return a value.
				[b]Note:[/b] On large arrays, this method will be slower if the inserted element is close to the beginning of the array (index 0). This is because all elements placed after the newly inserted element have to be reindexed.
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="map" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="method" type="Callable" />
			<description>
				Calls the provided [Callable] for each element in the array and returns a new array filled with values returned by the method.
				The callable's method should take one [Variant] parameter (the current array element) and can return any [Variant].
				[codeblock]
				func _ready():
				    print([1, 2, 3].map(negate)) # Prints [-1, -2, -3].
				    print([1, 2, 3].map(func(number): return -number)) # Same as above, but using lambda function.

				func negate(number):
				    return -number
				[/codeblock]
			</description>
		</method>
		<method name="max" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned.
			</description>
		</method>
		<method name="min" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned.
			</description>
		</method>
		<method name="pop_at">
			<return type="Variant" />
			<argument index="0" name="position" type="int" />
			<description>
				Removes and returns the element of the array at index [code]position[/code]. If negative, [code]position[/code] is considered relative to the end of the array. Leaves the array untouched and returns [code]null[/code] if the array is empty or if it's accessed out of bounds. An error message is printed when the array is accessed out of bounds, but not when the array is empty.
				[b]Note:[/b] On large arrays, this method can be slower than [method pop_back] as it will reindex the array's elements that are located after the removed element. The larger the array and the lower the index of the removed element, the slower [method pop_at] will be.
			</description>
		</method>
		<method name="pop_back">
			<return type="Variant" />
			<description>
				Removes and returns the last element of the array. Returns [code]null[/code] if the array is empty, without printing an error message. See also [method pop_front].
			</description>
		</method>
		<method name="pop_front">
			<return type="Variant" />
			<description>
				Removes and returns the first element of the array. Returns [code]null[/code] if the array is empty, without printing an error message. See also [method pop_back].
				[b]Note:[/b] On large arrays, this method is much slower than [method pop_back] as it will reindex all the array's elements every time it's called. The larger the array, the slower [method pop_front] will be.
			</description>
		</method>
		<method name="push_back">
			<return type="void" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Appends an element at the end of the array. See also [method push_front].
			</description>
		</method>
		<method name="push_front">
			<return type="void" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Adds an element at the beginning of the array. See also [method push_back].
				[b]Note:[/b] On large arrays, this method is much slower than [method push_back] as it will reindex all the array's elements every time it's called. The larger the array, the slower [method push_front] will be.
			</description>
		</method>
		<method name="reduce" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="method" type="Callable" />
			<argument index="1" name="accum" type="Variant" default="null" />
			<description>
				Calls the provided [Callable] for each element in array and accumulates the result in [code]accum[/code].
				The callable's method takes two arguments: the current value of [code]accum[/code] and the current array element. If [code]accum[/code] is [code]null[/code] (default value), the iteration will start from the second element, with the first one used as initial value of [code]accum[/code].
				[codeblock]
				func _ready():
				    print([1, 2, 3].reduce(sum, 10)) # Prints 16.
				    print([1, 2, 3].reduce(func(accum, number): return accum + number, 10)) # Same as above, but using lambda function.

				func sum(accum, number):
				    return accum + number
				[/codeblock]
			</description>
		</method>
		<method name="remove">
			<return type="void" />
			<argument index="0" name="position" type="int" />
			<description>
				Removes an element from the array by index. If the index does not exist in the array, nothing happens. To remove an element by searching for its value, use [method erase] instead.
				[b]Note:[/b] This method acts in-place and doesn't return a value.
				[b]Note:[/b] On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.
			</description>
		</method>
		<method name="resize">
			<return type="int" />
			<argument index="0" name="size" type="int" />
			<description>
				Resizes the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are [code]null[/code].
			</description>
		</method>
		<method name="reverse">
			<return type="void" />
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="rfind" qualifiers="const">
			<return type="int" />
			<argument index="0" name="what" type="Variant" />
			<argument index="1" name="from" type="int" default="-1" />
			<description>
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			</description>
		</method>
		<method name="shuffle">
			<return type="void" />
			<description>
				Shuffles the array such that the items will have a random order. This method uses the global random number generator common to methods such as [method @GlobalScope.randi]. Call [method @GlobalScope.randomize] to ensure that a new seed will be used each time if you want non-reproducible shuffling.
			</description>
		</method>
		<method name="size" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of elements in the array.
			</description>
		</method>
		<method name="slice" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="begin" type="int" />
			<argument index="1" name="end" type="int" />
			<argument index="2" name="step" type="int" default="1" />
			<argument index="3" name="deep" type="bool" default="false" />
			<description>
				Duplicates the subset described in the function and returns it in an array, deeply copying the array if [code]deep[/code] is [code]true[/code]. Lower and upper index are inclusive, with the [code]step[/code] describing the change between indices while slicing. Wraps around if [code]begin[/code] or [code]end[/code] are out of bounds or negative. Returns an empty array for invalid parameters.
			</description>
		</method>
		<method name="sort">
			<return type="void" />
			<description>
				Sorts the array.
				[b]Note:[/b] Strings are sorted in alphabetical order (as opposed to natural order). This may lead to unexpected behavior when sorting an array of strings ending with a sequence of numbers. Consider the following example:
				[codeblocks]
				[gdscript]
				var strings = ["string1", "string2", "string10", "string11"]
				strings.sort()
				print(strings) # Prints [string1, string10, string11, string2]
				[/gdscript]
				[csharp]
				// There is no sort support for Godot.Collections.Array
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="sort_custom">
			<return type="void" />
			<argument index="0" name="func" type="Callable" />
			<description>
				Sorts the array using a custom method. The custom method receives two arguments (a pair of elements from the array) and must return either [code]true[/code] or [code]false[/code]. For two elements [code]a[/code] and [code]b[/code], if the given method returns [code]true[/code], element [code]b[/code] will be after element [code]a[/code] in the array.
				[b]Note:[/b] You cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.
				[codeblocks]
				[gdscript]
				class MyCustomSorter:
				    static func sort_ascending(a, b):
				        if a[0] &lt; b[0]:
				            return true
				        return false

				var my_items = [[5, "Potato"], [9, "Rice"], [4, "Tomato"]]
				my_items.sort_custom(MyCustomSorter.sort_ascending)
				print(my_items) # Prints [[4, Tomato], [5, Potato], [9, Rice]].
				[/gdscript]
				[csharp]
				// There is no custom sort support for Godot.Collections.Array
				[/csharp]
				[/codeblocks]
			</description>
		</method>
	</methods>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<description>
			</description>
		</operator>
		<operator name="operator !=">
			<return type="bool" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator +">
			<return type="Array" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator &lt;">
			<return type="bool" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator &lt;=">
			<return type="bool" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<description>
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator &gt;">
			<return type="bool" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator &gt;=">
			<return type="bool" />
			<argument index="0" name="right" type="Array" />
			<description>
			</description>
		</operator>
		<operator name="operator []">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
			</description>
		</operator>
	</operators>
</class>
