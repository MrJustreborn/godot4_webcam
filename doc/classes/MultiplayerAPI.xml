<?xml version="1.0" encoding="UTF-8" ?>
<class name="MultiplayerAPI" inherits="RefCounted" version="4.0">
	<brief_description>
		High-level multiplayer API.
	</brief_description>
	<description>
		This class implements the high-level multiplayer API. See also [MultiplayerPeer].
		By default, [SceneTree] has a reference to this class that is used to provide multiplayer capabilities (i.e. RPCs) across the whole scene.
		It is possible to override the MultiplayerAPI instance used by specific Nodes by setting the [member Node.custom_multiplayer] property, effectively allowing to run both client and server in the same scene.
		[b]Note:[/b] The high-level multiplayer API protocol is an implementation detail and isn't meant to be used by non-Godot servers. It may change without notice.
		[b]Note:[/b] When exporting to Android, make sure to enable the [code]INTERNET[/code] permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear">
			<return type="void" />
			<description>
				Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing).
			</description>
		</method>
		<method name="get_peers" qualifiers="const">
			<return type="PackedInt32Array" />
			<description>
				Returns the peer IDs of all connected peers of this MultiplayerAPI's [member multiplayer_peer].
			</description>
		</method>
		<method name="get_remote_sender_id" qualifiers="const">
			<return type="int" />
			<description>
				Returns the sender's peer ID for the RPC currently being executed.
				[b]Note:[/b] If not inside an RPC this method will return 0.
			</description>
		</method>
		<method name="get_unique_id" qualifiers="const">
			<return type="int" />
			<description>
				Returns the unique peer ID of this MultiplayerAPI's [member multiplayer_peer].
			</description>
		</method>
		<method name="has_multiplayer_peer" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if there is a [member multiplayer_peer] set.
			</description>
		</method>
		<method name="is_server" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this MultiplayerAPI's [member multiplayer_peer] is valid and in server mode (listening for connections).
			</description>
		</method>
		<method name="poll">
			<return type="void" />
			<description>
				Method used for polling the MultiplayerAPI. You only need to worry about this if you are using [member Node.custom_multiplayer] override or you set [member SceneTree.multiplayer_poll] to [code]false[/code]. By default, [SceneTree] will poll its MultiplayerAPI for you.
				[b]Note:[/b] This method results in RPCs being called, so they will be executed in the same context of this function (e.g. [code]_process[/code], [code]physics[/code], [Thread]).
			</description>
		</method>
		<method name="send_bytes">
			<return type="int" enum="Error" />
			<argument index="0" name="bytes" type="PackedByteArray" />
			<argument index="1" name="id" type="int" default="0" />
			<argument index="2" name="mode" type="int" enum="TransferMode" default="2" />
			<argument index="3" name="channel" type="int" default="0" />
			<description>
				Sends the given raw [code]bytes[/code] to a specific peer identified by [code]id[/code] (see [method MultiplayerPeer.set_target_peer]). Default ID is [code]0[/code], i.e. broadcast to all peers.
			</description>
		</method>
	</methods>
	<members>
		<member name="allow_object_decoding" type="bool" setter="set_allow_object_decoding" getter="is_object_decoding_allowed" default="false">
			If [code]true[/code], the MultiplayerAPI will allow encoding and decoding of object during RPCs.
			[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
		</member>
		<member name="multiplayer_peer" type="MultiplayerPeer" setter="set_multiplayer_peer" getter="get_multiplayer_peer">
			The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with [method is_server]) and will set root node's network mode to authority, or it will become a regular client peer. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals.
		</member>
		<member name="refuse_new_connections" type="bool" setter="set_refuse_new_connections" getter="is_refusing_new_connections" default="false">
			If [code]true[/code], the MultiplayerAPI's [member multiplayer_peer] refuses new incoming connections.
		</member>
		<member name="replicator" type="MultiplayerReplicator" setter="" getter="get_replicator">
		</member>
		<member name="root_node" type="Node" setter="set_root_node" getter="get_root_node">
			The root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.
			This effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene.
		</member>
	</members>
	<signals>
		<signal name="connected_to_server">
			<description>
				Emitted when this MultiplayerAPI's [member multiplayer_peer] successfully connected to a server. Only emitted on clients.
			</description>
		</signal>
		<signal name="connection_failed">
			<description>
				Emitted when this MultiplayerAPI's [member multiplayer_peer] fails to establish a connection to a server. Only emitted on clients.
			</description>
		</signal>
		<signal name="peer_connected">
			<argument index="0" name="id" type="int" />
			<description>
				Emitted when this MultiplayerAPI's [member multiplayer_peer] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).
			</description>
		</signal>
		<signal name="peer_disconnected">
			<argument index="0" name="id" type="int" />
			<description>
				Emitted when this MultiplayerAPI's [member multiplayer_peer] disconnects from a peer. Clients get notified when other clients disconnect from the same server.
			</description>
		</signal>
		<signal name="peer_packet">
			<argument index="0" name="id" type="int" />
			<argument index="1" name="packet" type="PackedByteArray" />
			<description>
				Emitted when this MultiplayerAPI's [member multiplayer_peer] receives a [code]packet[/code] with custom data (see [method send_bytes]). ID is the peer ID of the peer that sent the packet.
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
				Emitted when this MultiplayerAPI's [member multiplayer_peer] disconnects from server. Only emitted on clients.
			</description>
		</signal>
	</signals>
</class>
