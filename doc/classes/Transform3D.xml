<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transform3D" version="4.0">
	<brief_description>
		3D transformation (3×4 matrix).
	</brief_description>
	<description>
		3×4 matrix (3 rows, 4 columns) used for 3D linear transformations. It can represent transformations such as translation, rotation, or scaling. It consists of a [member basis] (first 3 columns) and a [Vector3] for the [member origin] (last column).
		For more information, read the "Matrices and transforms" documentation article.
	</description>
	<tutorials>
		<link title="Math documentation index">https://docs.godotengine.org/en/latest/tutorials/math/index.html</link>
		<link title="Matrices and transforms">https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html</link>
		<link title="Using 3D transforms">https://docs.godotengine.org/en/latest/tutorials/3d/using_transforms.html</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="3D Platformer Demo">https://godotengine.org/asset-library/asset/125</link>
		<link title="2.5D Demo">https://godotengine.org/asset-library/asset/583</link>
	</tutorials>
	<constructors>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<description>
				Constructs a default-initialized [Transform3D] set to [constant IDENTITY].
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<argument index="0" name="from" type="Transform3D" />
			<description>
				Constructs a [Transform3D] as a copy of the given [Transform3D].
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<argument index="0" name="basis" type="Basis" />
			<argument index="1" name="origin" type="Vector3" />
			<description>
				Constructs a Transform3D from a [Basis] and [Vector3].
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<argument index="0" name="x_axis" type="Vector3" />
			<argument index="1" name="y_axis" type="Vector3" />
			<argument index="2" name="z_axis" type="Vector3" />
			<argument index="3" name="origin" type="Vector3" />
			<description>
				Constructs a Transform3D from four [Vector3] values (matrix columns). Each axis corresponds to local basis vectors (some of which may be scaled).
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="affine_inverse" qualifiers="const">
			<return type="Transform3D" />
			<description>
				Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation.
			</description>
		</method>
		<method name="interpolate_with" qualifiers="const">
			<return type="Transform3D" />
			<argument index="0" name="xform" type="Transform3D" />
			<argument index="1" name="weight" type="float" />
			<description>
				Interpolates the transform to other Transform3D by weight amount (on the range of 0.0 to 1.0).
			</description>
		</method>
		<method name="inverse" qualifiers="const">
			<return type="Transform3D" />
			<description>
				Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling).
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="xform" type="Transform3D" />
			<description>
				Returns [code]true[/code] if this transform and [code]transform[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component.
			</description>
		</method>
		<method name="looking_at" qualifiers="const">
			<return type="Transform3D" />
			<argument index="0" name="target" type="Vector3" />
			<argument index="1" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<description>
				Returns a copy of the transform rotated such that the forward axis (-Z) points towards the [code]target[/code] position.
				The up axis (+Y) points as close to the [code]up[/code] vector as possible while staying perpendicular to the forward axis. The resulting transform is orthonormalized. The existing rotation, scale, and skew information from the original transform is discarded. The [code]target[/code] and [code]up[/code] vectors cannot be zero, cannot be parallel to each other, and are defined in global/parent space.
			</description>
		</method>
		<method name="orthonormalized" qualifiers="const">
			<return type="Transform3D" />
			<description>
				Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors.
			</description>
		</method>
		<method name="rotated" qualifiers="const">
			<return type="Transform3D" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="phi" type="float" />
			<description>
				Rotates the transform around the given axis by the given angle (in radians), using matrix multiplication. The axis must be a normalized vector.
			</description>
		</method>
		<method name="scaled" qualifiers="const">
			<return type="Transform3D" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Scales basis and origin of the transform by the given scale factor, using matrix multiplication.
			</description>
		</method>
		<method name="translated" qualifiers="const">
			<return type="Transform3D" />
			<argument index="0" name="offset" type="Vector3" />
			<description>
				Translates the transform by the given offset, relative to the transform's basis vectors.
				Unlike [method rotated] and [method scaled], this does not use matrix multiplication.
			</description>
		</method>
	</methods>
	<members>
		<member name="basis" type="Basis" setter="" getter="" default="Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)">
			The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.
		</member>
		<member name="origin" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			The translation offset of the transform (column 3, the fourth column). Equivalent to array index [code]3[/code].
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)">
			[Transform3D] with no translation, rotation or scaling applied. When applied to other data structures, [constant IDENTITY] performs no transformation.
		</constant>
		<constant name="FLIP_X" value="Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)">
			[Transform3D] with mirroring applied perpendicular to the YZ plane.
		</constant>
		<constant name="FLIP_Y" value="Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)">
			[Transform3D] with mirroring applied perpendicular to the XZ plane.
		</constant>
		<constant name="FLIP_Z" value="Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)">
			[Transform3D] with mirroring applied perpendicular to the XY plane.
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<description>
			</description>
		</operator>
		<operator name="operator !=">
			<return type="bool" />
			<argument index="0" name="right" type="Transform3D" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="PackedVector3Array" />
			<argument index="0" name="right" type="PackedVector3Array" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform3D" />
			<argument index="0" name="right" type="Transform3D" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="AABB" />
			<argument index="0" name="right" type="AABB" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector3" />
			<argument index="0" name="right" type="Vector3" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform3D" />
			<argument index="0" name="right" type="float" />
			<description>
				This operator multiplies all components of the [Transform3D], including the origin vector, which scales it uniformly.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform3D" />
			<argument index="0" name="right" type="int" />
			<description>
				This operator multiplies all components of the [Transform3D], including the origin vector, which scales it uniformly.
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<description>
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<argument index="0" name="right" type="Transform3D" />
			<description>
			</description>
		</operator>
	</operators>
</class>
