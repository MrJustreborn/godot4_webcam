<?xml version="1.0" encoding="UTF-8" ?>
<class name="RigidDynamicBody2D" inherits="PhysicsBody2D" version="4.0">
	<brief_description>
		Physics Body which is moved by 2D physics simulation. Useful for objects that have gravity and can be pushed by other objects.
	</brief_description>
	<description>
		This node implements simulated 2D physics. You do not control a RigidDynamicBody2D directly. Instead, you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.
		You can switch the body's behavior using [member lock_rotation], [member freeze], and [member freeze_mode].
		[b]Note:[/b] You should not change a RigidDynamicBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.
		Please also keep in mind that physics bodies manage their own transform which overwrites the ones you set. So any direct or indirect transformation (including scaling of the node or its parent) will be visible in the editor only, and immediately reset at runtime.
		If you need to override the default physics behavior or add a transformation at runtime, you can write a custom force integration. See [member custom_integrator].
	</description>
	<tutorials>
		<link title="2D Physics Platformer Demo">https://godotengine.org/asset-library/asset/119</link>
		<link title="Instancing Demo">https://godotengine.org/asset-library/asset/148</link>
	</tutorials>
	<methods>
		<method name="_integrate_forces" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="state" type="PhysicsDirectBodyState2D" />
			<description>
				Allows you to read and safely modify the simulation state for the object. Use this instead of [method Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default, it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body.
			</description>
		</method>
		<method name="add_central_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector2" />
			<description>
				Adds a constant directional force without affecting rotation.
			</description>
		</method>
		<method name="add_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector2" />
			<argument index="1" name="position" type="Vector2" default="Vector2(0, 0)" />
			<description>
				Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.
			</description>
		</method>
		<method name="add_torque">
			<return type="void" />
			<argument index="0" name="torque" type="float" />
			<description>
				Adds a constant rotational force.
			</description>
		</method>
		<method name="apply_central_impulse">
			<return type="void" />
			<argument index="0" name="impulse" type="Vector2" default="Vector2(0, 0)" />
			<description>
				Applies a directional impulse without affecting rotation.
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void" />
			<argument index="0" name="impulse" type="Vector2" />
			<argument index="1" name="position" type="Vector2" default="Vector2(0, 0)" />
			<description>
				Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin.
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void" />
			<argument index="0" name="torque" type="float" />
			<description>
				Applies a rotational impulse to the body.
			</description>
		</method>
		<method name="get_colliding_bodies" qualifiers="const">
			<return type="Node2D[]" />
			<description>
				Returns a list of the bodies colliding with this one. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions.
				[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.
			</description>
		</method>
		<method name="set_axis_velocity">
			<return type="void" />
			<argument index="0" name="axis_velocity" type="Vector2" />
			<description>
				Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_damp" type="float" setter="set_angular_damp" getter="get_angular_damp" default="0.0">
			Damps the body's rotation. By default, the body will use the [b]Default Angular Damp[/b] in [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b] or any value override set by an [Area2D] the body is in. Depending on [member angular_damp_mode], you can set [member angular_damp] to be added to or to replace the body's damping value.
			See [member ProjectSettings.physics/2d/default_angular_damp] for more details about damping.
		</member>
		<member name="angular_damp_mode" type="int" setter="set_angular_damp_mode" getter="get_angular_damp_mode" enum="RigidDynamicBody2D.DampMode" default="0">
			Defines how [member angular_damp] is applied. See [enum DampMode] for possible values.
		</member>
		<member name="angular_velocity" type="float" setter="set_angular_velocity" getter="get_angular_velocity" default="0.0">
			The body's rotational velocity.
		</member>
		<member name="applied_force" type="Vector2" setter="set_applied_force" getter="get_applied_force" default="Vector2(0, 0)">
			The body's total applied force.
		</member>
		<member name="applied_torque" type="float" setter="set_applied_torque" getter="get_applied_torque" default="0.0">
			The body's total applied torque.
		</member>
		<member name="can_sleep" type="bool" setter="set_can_sleep" getter="is_able_to_sleep" default="true">
			If [code]true[/code], the body can enter sleep mode when there is no movement. See [member sleeping].
		</member>
		<member name="center_of_mass" type="Vector2" setter="set_center_of_mass" getter="get_center_of_mass" default="Vector2(0, 0)">
			The body's custom center of mass, relative to the body's origin position, when [member center_of_mass_mode] is set to [constant CENTER_OF_MASS_MODE_CUSTOM]. This is the balanced point of the body, where applied forces only cause linear acceleration. Applying forces outside of the center of mass causes angular acceleration.
			When [member center_of_mass_mode] is set to [constant CENTER_OF_MASS_MODE_AUTO] (default value), the center of mass is automatically computed.
		</member>
		<member name="center_of_mass_mode" type="int" setter="set_center_of_mass_mode" getter="get_center_of_mass_mode" enum="RigidDynamicBody2D.CenterOfMassMode" default="0">
			Defines the way the body's center of mass is set. See [enum CenterOfMassMode] for possible values.
		</member>
		<member name="contact_monitor" type="bool" setter="set_contact_monitor" getter="is_contact_monitor_enabled" default="false">
			If [code]true[/code], the body will emit signals when it collides with another RigidDynamicBody2D. See also [member contacts_reported].
		</member>
		<member name="contacts_reported" type="int" setter="set_max_contacts_reported" getter="get_max_contacts_reported" default="0">
			The maximum number of contacts that will be recorded. Requires [member contact_monitor] to be set to [code]true[/code].
			[b]Note:[/b] The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end).
		</member>
		<member name="continuous_cd" type="int" setter="set_continuous_collision_detection_mode" getter="get_continuous_collision_detection_mode" enum="RigidDynamicBody2D.CCDMode" default="0">
			Continuous collision detection mode.
			Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [enum CCDMode] for details.
		</member>
		<member name="custom_integrator" type="bool" setter="set_use_custom_integrator" getter="is_using_custom_integrator" default="false">
			If [code]true[/code], internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [method _integrate_forces] function.
		</member>
		<member name="freeze" type="bool" setter="set_freeze_enabled" getter="is_freeze_enabled" default="false">
			If [code]true[/code], the body is frozen. Gravity and forces are not applied anymore.
			See [member freeze_mode] to set the body's behavior when frozen.
			For a body that is always frozen, use [StaticBody2D] or [AnimatableBody2D] instead.
		</member>
		<member name="freeze_mode" type="int" setter="set_freeze_mode" getter="get_freeze_mode" enum="RigidDynamicBody2D.FreezeMode" default="0">
			The body's freeze mode. Can be used to set the body's behavior when [member freeze] is enabled. See [enum FreezeMode] for possible values.
			For a body that is always frozen, use [StaticBody2D] or [AnimatableBody2D] instead.
		</member>
		<member name="gravity_scale" type="float" setter="set_gravity_scale" getter="get_gravity_scale" default="1.0">
			Multiplies the gravity applied to the body. The body's gravity is calculated from the [b]Default Gravity[/b] value in [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b] and/or any additional gravity vector applied by [Area2D]s.
		</member>
		<member name="inertia" type="float" setter="set_inertia" getter="get_inertia" default="0.0">
			The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this property allows you to set a custom value.
			If set to [code]0[/code], inertia is automatically computed (default value).
		</member>
		<member name="linear_damp" type="float" setter="set_linear_damp" getter="get_linear_damp" default="0.0">
			Damps the body's movement. By default, the body will use the [b]Default Linear Damp[/b] in [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b] or any value override set by an [Area2D] the body is in. Depending on [member linear_damp_mode], you can set [member linear_damp] to be added to or to replace the body's damping value.
			See [member ProjectSettings.physics/2d/default_linear_damp] for more details about damping.
		</member>
		<member name="linear_damp_mode" type="int" setter="set_linear_damp_mode" getter="get_linear_damp_mode" enum="RigidDynamicBody2D.DampMode" default="0">
			Defines how [member linear_damp] is applied. See [enum DampMode] for possible values.
		</member>
		<member name="linear_velocity" type="Vector2" setter="set_linear_velocity" getter="get_linear_velocity" default="Vector2(0, 0)">
			The body's linear velocity.
		</member>
		<member name="lock_rotation" type="bool" setter="set_lock_rotation_enabled" getter="is_lock_rotation_enabled" default="false">
			If [code]true[/code], the body cannot rotate. Gravity and forces only apply linear movement.
		</member>
		<member name="mass" type="float" setter="set_mass" getter="get_mass" default="1.0">
			The body's mass.
		</member>
		<member name="physics_material_override" type="PhysicsMaterial" setter="set_physics_material_override" getter="get_physics_material_override">
			The physics material override for the body.
			If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.
		</member>
		<member name="sleeping" type="bool" setter="set_sleeping" getter="is_sleeping" default="false">
			If [code]true[/code], the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the [method apply_impulse] or [method add_force] methods.
		</member>
	</members>
	<signals>
		<signal name="body_entered">
			<argument index="0" name="body" type="Node" />
			<description>
				Emitted when a collision with another [PhysicsBody2D] or [TileMap] occurs. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].
			</description>
		</signal>
		<signal name="body_exited">
			<argument index="0" name="body" type="Node" />
			<description>
				Emitted when the collision with another [PhysicsBody2D] or [TileMap] ends. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].
			</description>
		</signal>
		<signal name="body_shape_entered">
			<argument index="0" name="body_rid" type="RID" />
			<argument index="1" name="body" type="Node" />
			<argument index="2" name="body_shape_index" type="int" />
			<argument index="3" name="local_shape_index" type="int" />
			<description>
				Emitted when one of this RigidDynamicBody2D's [Shape2D]s collides with another [PhysicsBody2D] or [TileMap]'s [Shape2D]s. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[code]body_rid[/code] the [RID] of the other [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [PhysicsServer2D].
				[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].
				[code]body_shape_index[/code] the index of the [Shape2D] of the other [PhysicsBody2D] or [TileMap] used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]body.shape_owner_get_owner(body_shape_index)[/code].
				[code]local_shape_index[/code] the index of the [Shape2D] of this RigidDynamicBody2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]self.shape_owner_get_owner(local_shape_index)[/code].
			</description>
		</signal>
		<signal name="body_shape_exited">
			<argument index="0" name="body_rid" type="RID" />
			<argument index="1" name="body" type="Node" />
			<argument index="2" name="body_shape_index" type="int" />
			<argument index="3" name="local_shape_index" type="int" />
			<description>
				Emitted when the collision between one of this RigidDynamicBody2D's [Shape2D]s and another [PhysicsBody2D] or [TileMap]'s [Shape2D]s ends. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.
				[code]body_rid[/code] the [RID] of the other [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [PhysicsServer2D].
				[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].
				[code]body_shape_index[/code] the index of the [Shape2D] of the other [PhysicsBody2D] or [TileMap] used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]body.shape_owner_get_owner(body_shape_index)[/code].
				[code]local_shape_index[/code] the index of the [Shape2D] of this RigidDynamicBody2D used by the [PhysicsServer2D]. Get the [CollisionShape2D] node with [code]self.shape_owner_get_owner(local_shape_index)[/code].
			</description>
		</signal>
		<signal name="sleeping_state_changed">
			<description>
				Emitted when the physics engine changes the body's sleeping state.
				[b]Note:[/b] Changing the value [member sleeping] will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or [code]emit_signal("sleeping_state_changed")[/code] is used.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="FREEZE_MODE_STATIC" value="0" enum="FreezeMode">
			Static body freeze mode (default). The body is not affected by gravity and forces. It can be only moved by user code and doesn't collide with other bodies along its path.
		</constant>
		<constant name="FREEZE_MODE_KINEMATIC" value="1" enum="FreezeMode">
			Kinematic body freeze mode. Similar to [constant FREEZE_MODE_STATIC], but collides with other bodies along its path when moved. Useful for a frozen body that needs to be animated.
		</constant>
		<constant name="CENTER_OF_MASS_MODE_AUTO" value="0" enum="CenterOfMassMode">
			In this mode, the body's center of mass is calculated automatically based on its shapes.
		</constant>
		<constant name="CENTER_OF_MASS_MODE_CUSTOM" value="1" enum="CenterOfMassMode">
			In this mode, the body's center of mass is set through [member center_of_mass]. Defaults to the body's origin position.
		</constant>
		<constant name="DAMP_MODE_COMBINE" value="0" enum="DampMode">
			In this mode, the body's damping value is added to any value set in areas or the default value.
		</constant>
		<constant name="DAMP_MODE_REPLACE" value="1" enum="DampMode">
			In this mode, the body's damping value replaces any value set in areas or the default value.
		</constant>
		<constant name="CCD_MODE_DISABLED" value="0" enum="CCDMode">
			Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.
		</constant>
		<constant name="CCD_MODE_CAST_RAY" value="1" enum="CCDMode">
			Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.
		</constant>
		<constant name="CCD_MODE_CAST_SHAPE" value="2" enum="CCDMode">
			Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.
		</constant>
	</constants>
</class>
