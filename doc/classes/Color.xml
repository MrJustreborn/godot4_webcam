<?xml version="1.0" encoding="UTF-8" ?>
<class name="Color" version="4.0">
	<brief_description>
		Color in RGBA format using floats on the range of 0 to 1.
	</brief_description>
	<description>
		A color represented by red, green, blue, and alpha (RGBA) components. The alpha component is often used for transparency. Values are in floating-point and usually range from 0 to 1. Some properties (such as CanvasItem.modulate) may accept values greater than 1 (overbright or HDR colors).
		You can also create a color from standardized color names by using the string constructor or directly using the color constants defined here. The standardized color set is based on the [url=https://en.wikipedia.org/wiki/X11_color_names]X11 color names[/url].
		If you want to supply values in a range of 0 to 255, you should use [method @GDScript.Color8].
		[b]Note:[/b] In a boolean context, a Color will evaluate to [code]false[/code] if it's equal to [code]Color(0, 0, 0, 1)[/code] (opaque black). Otherwise, a Color will always evaluate to [code]true[/code].
		[url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/color_constants.png]Color constants cheatsheet[/url]
	</description>
	<tutorials>
		<link title="2D GD Paint Demo">https://godotengine.org/asset-library/asset/517</link>
		<link title="Tween Demo">https://godotengine.org/asset-library/asset/146</link>
		<link title="GUI Drag And Drop Demo">https://godotengine.org/asset-library/asset/133</link>
	</tutorials>
	<constructors>
		<constructor name="Color">
			<return type="Color" />
			<description>
				Constructs a default-initialized [Color] with all components set to [code]0[/code].
			</description>
		</constructor>
		<constructor name="Color">
			<return type="Color" />
			<argument index="0" name="from" type="Color" />
			<argument index="1" name="alpha" type="float" />
			<description>
				Constructs a [Color] from an existing color, but with a custom alpha value.
				[codeblocks]
				[gdscript]
				var red = Color(Color.red, 0.5) # 50% transparent red.
				[/gdscript]
				[csharp]
				var red = new Color(Colors.Red, 0.5f); // 50% transparent red.
				[/csharp]
				[/codeblocks]
			</description>
		</constructor>
		<constructor name="Color">
			<return type="Color" />
			<argument index="0" name="from" type="Color" />
			<description>
				Constructs a [Color] as a copy of the given [Color].
			</description>
		</constructor>
		<constructor name="Color">
			<return type="Color" />
			<argument index="0" name="code" type="String" />
			<description>
				Constructs a [Color] either from an HTML color code or from a standardized color name. Supported color names are the same as the constants.
			</description>
		</constructor>
		<constructor name="Color">
			<return type="Color" />
			<argument index="0" name="code" type="String" />
			<argument index="1" name="alpha" type="float" />
			<description>
				Constructs a [Color] either from an HTML color code or from a standardized color name, with [code]alpha[/code] on the range of 0 to 1. Supported color names are the same as the constants.
			</description>
		</constructor>
		<constructor name="Color">
			<return type="Color" />
			<argument index="0" name="r" type="float" />
			<argument index="1" name="g" type="float" />
			<argument index="2" name="b" type="float" />
			<description>
				Constructs a [Color] from RGB values, typically between 0 and 1. Alpha will be 1.
				[codeblocks]
				[gdscript]
				var color = Color(0.2, 1.0, 0.7) # Similar to `Color8(51, 255, 178, 255)`
				[/gdscript]
				[csharp]
				var color = new Color(0.2f, 1.0f, 0.7f); // Similar to `Color.Color8(51, 255, 178, 255)`
				[/csharp]
				[/codeblocks]
			</description>
		</constructor>
		<constructor name="Color">
			<return type="Color" />
			<argument index="0" name="r" type="float" />
			<argument index="1" name="g" type="float" />
			<argument index="2" name="b" type="float" />
			<argument index="3" name="a" type="float" />
			<description>
				Constructs a [Color] from RGBA values, typically between 0 and 1.
				[codeblocks]
				[gdscript]
				var color = Color(0.2, 1.0, 0.7, 0.8) # Similar to `Color8(51, 255, 178, 204)`
				[/gdscript]
				[csharp]
				var color = new Color(0.2f, 1.0f, 0.7f, 0.8f); // Similar to `Color.Color8(51, 255, 178, 255, 204)`
				[/csharp]
				[/codeblocks]
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="blend" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="over" type="Color" />
			<description>
				Returns a new color resulting from blending this color over another. If the color is opaque, the result is also opaque. The second color may have a range of alpha values.
				[codeblocks]
				[gdscript]
				var bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%
				var fg = Color(1.0, 0.0, 0.0, 0.5) # Red with alpha of 50%
				var blended_color = bg.blend(fg) # Brown with alpha of 75%
				[/gdscript]
				[csharp]
				var bg = new Color(0.0f, 1.0f, 0.0f, 0.5f); // Green with alpha of 50%
				var fg = new Color(1.0f, 0.0f, 0.0f, 0.5f); // Red with alpha of 50%
				Color blendedColor = bg.Blend(fg); // Brown with alpha of 75%
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="clamp" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="min" type="Color" default="Color(0, 0, 0, 0)" />
			<argument index="1" name="max" type="Color" default="Color(1, 1, 1, 1)" />
			<description>
				Returns a new color with all components clamped between the components of [code]min[/code] and [code]max[/code], by running [method @GlobalScope.clamp] on each component.
			</description>
		</method>
		<method name="darkened" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="amount" type="float" />
			<description>
				Returns a new color resulting from making this color darker by the specified percentage (ratio from 0 to 1).
				[codeblocks]
				[gdscript]
				var green = Color(0.0, 1.0, 0.0)
				var darkgreen = green.darkened(0.2) # 20% darker than regular green
				[/gdscript]
				[csharp]
				var green = new Color(0.0f, 1.0f, 0.0f);
				Color darkgreen = green.Darkened(0.2f); // 20% darker than regular green
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="find_named_color" qualifiers="static">
			<return type="int" />
			<argument index="0" name="name" type="String" />
			<description>
			</description>
		</method>
		<method name="from_hsv" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="h" type="float" />
			<argument index="1" name="s" type="float" />
			<argument index="2" name="v" type="float" />
			<argument index="3" name="alpha" type="float" default="1.0" />
			<description>
				Constructs a color from an [url=https://en.wikipedia.org/wiki/HSL_and_HSV]HSV profile[/url]. [code]h[/code] (hue), [code]s[/code] (saturation), and [code]v[/code] (value) are typically between 0 and 1.
				[codeblocks]
				[gdscript]
				var c = Color.from_hsv(0.58, 0.5, 0.79, 0.8)
				[/gdscript]
				[csharp]
				var c = Color.FromHsv(0.58f, 0.5f, 0.79f, 0.8f);
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="from_rgbe9995" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="rgbe" type="int" />
			<description>
			</description>
		</method>
		<method name="from_string" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="str" type="String" />
			<argument index="1" name="default" type="Color" />
			<description>
			</description>
		</method>
		<method name="get_named_color" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_named_color_count" qualifiers="static">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_named_color_name" qualifiers="static">
			<return type="String" />
			<argument index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="hex" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="hex" type="int" />
			<description>
			</description>
		</method>
		<method name="hex64" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="hex" type="int" />
			<description>
			</description>
		</method>
		<method name="html" qualifiers="static">
			<return type="Color" />
			<argument index="0" name="rgba" type="String" />
			<description>
			</description>
		</method>
		<method name="html_is_valid" qualifiers="static">
			<return type="bool" />
			<argument index="0" name="color" type="String" />
			<description>
			</description>
		</method>
		<method name="inverted" qualifiers="const">
			<return type="Color" />
			<description>
				Returns the inverted color [code](1 - r, 1 - g, 1 - b, a)[/code].
				[codeblocks]
				[gdscript]
				var color = Color(0.3, 0.4, 0.9)
				var inverted_color = color.inverted() # Equivalent to `Color(0.7, 0.6, 0.1)`
				[/gdscript]
				[csharp]
				var color = new Color(0.3f, 0.4f, 0.9f);
				Color invertedColor = color.Inverted(); // Equivalent to `new Color(0.7f, 0.6f, 0.1f)`
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="to" type="Color" />
			<description>
				Returns [code]true[/code] if this color and [code]color[/code] are approximately equal, by running [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="lerp" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="to" type="Color" />
			<argument index="1" name="weight" type="float" />
			<description>
				Returns the linear interpolation with another color. The interpolation factor [code]weight[/code] is between 0 and 1.
				[codeblocks]
				[gdscript]
				var c1 = Color(1.0, 0.0, 0.0)
				var c2 = Color(0.0, 1.0, 0.0)
				var lerp_color = c1.lerp(c2, 0.5) # Equivalent to `Color(0.5, 0.5, 0.0)`
				[/gdscript]
				[csharp]
				var c1 = new Color(1.0f, 0.0f, 0.0f);
				var c2 = new Color(0.0f, 1.0f, 0.0f);
				Color lerpColor = c1.Lerp(c2, 0.5f); // Equivalent to `new Color(0.5f, 0.5f, 0.0f)`
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="lightened" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="amount" type="float" />
			<description>
				Returns a new color resulting from making this color lighter by the specified percentage (ratio from 0 to 1).
				[codeblocks]
				[gdscript]
				var green = Color(0.0, 1.0, 0.0)
				var lightgreen = green.lightened(0.2) # 20% lighter than regular green
				[/gdscript]
				[csharp]
				var green = new Color(0.0f, 1.0f, 0.0f);
				Color lightgreen = green.Lightened(0.2f); // 20% lighter than regular green
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_abgr32" qualifiers="const">
			<return type="int" />
			<description>
				Returns the color converted to a 32-bit integer in ABGR format (each byte represents a color channel). ABGR is the reversed version of the default format.
				[codeblocks]
				[gdscript]
				var color = Color(1, 0.5, 0.2)
				print(color.to_abgr32()) # Prints 4281565439
				[/gdscript]
				[csharp]
				var color = new Color(1.0f, 0.5f, 0.2f);
				GD.Print(color.ToAbgr32()); // Prints 4281565439
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_abgr64" qualifiers="const">
			<return type="int" />
			<description>
				Returns the color converted to a 64-bit integer in ABGR format (each word represents a color channel). ABGR is the reversed version of the default format.
				[codeblocks]
				[gdscript]
				var color = Color(1, 0.5, 0.2)
				print(color.to_abgr64()) # Prints -225178692812801
				[/gdscript]
				[csharp]
				var color = new Color(1.0f, 0.5f, 0.2f);
				GD.Print(color.ToAbgr64()); // Prints -225178692812801
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_argb32" qualifiers="const">
			<return type="int" />
			<description>
				Returns the color converted to a 32-bit integer in ARGB format (each byte represents a color channel). ARGB is more compatible with DirectX.
				[codeblocks]
				[gdscript]
				var color = Color(1, 0.5, 0.2)
				print(color.to_argb32()) # Prints 4294934323
				[/gdscript]
				[csharp]
				var color = new Color(1.0f, 0.5f, 0.2f);
				GD.Print(color.ToArgb32()); // Prints 4294934323
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_argb64" qualifiers="const">
			<return type="int" />
			<description>
				Returns the color converted to a 64-bit integer in ARGB format (each word represents a color channel). ARGB is more compatible with DirectX.
				[codeblocks]
				[gdscript]
				var color = Color(1, 0.5, 0.2)
				print(color.to_argb64()) # Prints -2147470541
				[/gdscript]
				[csharp]
				var color = new Color(1.0f, 0.5f, 0.2f);
				GD.Print(color.ToArgb64()); // Prints -2147470541
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_html" qualifiers="const">
			<return type="String" />
			<argument index="0" name="with_alpha" type="bool" default="true" />
			<description>
				Returns the color converted to an HTML hexadecimal color string in RGBA format (ex: [code]ff34f822[/code]).
				Setting [code]with_alpha[/code] to [code]false[/code] excludes alpha from the hexadecimal string (and uses RGB instead of RGBA format).
				[codeblocks]
				[gdscript]
				var color = Color(1, 1, 1, 0.5)
				var with_alpha = color.to_html() # Returns "ffffff7f"
				var without_alpha = color.to_html(false) # Returns "ffffff"
				[/gdscript]
				[csharp]
				var color = new Color(1, 1, 1, 0.5f);
				String withAlpha = color.ToHtml(); // Returns "ffffff7f"
				String withoutAlpha = color.ToHtml(false); // Returns "ffffff"
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_rgba32" qualifiers="const">
			<return type="int" />
			<description>
				Returns the color converted to a 32-bit integer in RGBA format (each byte represents a color channel). RGBA is Godot's default format.
				[codeblocks]
				[gdscript]
				var color = Color(1, 0.5, 0.2)
				print(color.to_rgba32()) # Prints 4286526463
				[/gdscript]
				[csharp]
				var color = new Color(1, 0.5f, 0.2f);
				GD.Print(color.ToRgba32()); // Prints 4286526463
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="to_rgba64" qualifiers="const">
			<return type="int" />
			<description>
				Returns the color converted to a 64-bit integer in RGBA format (each word represents a color channel). RGBA is Godot's default format.
				[codeblocks]
				[gdscript]
				var color = Color(1, 0.5, 0.2)
				print(color.to_rgba64()) # Prints -140736629309441
				[/gdscript]
				[csharp]
				var color = new Color(1, 0.5f, 0.2f);
				GD.Print(color.ToRgba64()); // Prints -140736629309441
				[/csharp]
				[/codeblocks]
			</description>
		</method>
	</methods>
	<members>
		<member name="a" type="float" setter="" getter="" default="1.0">
			The color's alpha (transparency) component, typically on the range of 0 to 1.
		</member>
		<member name="a8" type="int" setter="" getter="" default="255">
			Wrapper for [member a] that uses the range 0 to 255 instead of 0 to 1.
		</member>
		<member name="b" type="float" setter="" getter="" default="0.0">
			The color's blue component, typically on the range of 0 to 1.
		</member>
		<member name="b8" type="int" setter="" getter="" default="0">
			Wrapper for [member b] that uses the range 0 to 255 instead of 0 to 1.
		</member>
		<member name="g" type="float" setter="" getter="" default="0.0">
			The color's green component, typically on the range of 0 to 1.
		</member>
		<member name="g8" type="int" setter="" getter="" default="0">
			Wrapper for [member g] that uses the range 0 to 255 instead of 0 to 1.
		</member>
		<member name="h" type="float" setter="" getter="" default="0.0">
			The HSV hue of this color, on the range 0 to 1.
		</member>
		<member name="r" type="float" setter="" getter="" default="0.0">
			The color's red component, typically on the range of 0 to 1.
		</member>
		<member name="r8" type="int" setter="" getter="" default="0">
			Wrapper for [member r] that uses the range 0 to 255 instead of 0 to 1.
		</member>
		<member name="s" type="float" setter="" getter="" default="0.0">
			The HSV saturation of this color, on the range 0 to 1.
		</member>
		<member name="v" type="float" setter="" getter="" default="0.0">
			The HSV value (brightness) of this color, on the range 0 to 1.
		</member>
	</members>
	<constants>
		<constant name="ALICE_BLUE" value="Color(0.94, 0.97, 1, 1)">
			Alice blue color.
		</constant>
		<constant name="ANTIQUE_WHITE" value="Color(0.98, 0.92, 0.84, 1)">
			Antique white color.
		</constant>
		<constant name="AQUA" value="Color(0, 1, 1, 1)">
			Aqua color.
		</constant>
		<constant name="AQUAMARINE" value="Color(0.5, 1, 0.83, 1)">
			Aquamarine color.
		</constant>
		<constant name="AZURE" value="Color(0.94, 1, 1, 1)">
			Azure color.
		</constant>
		<constant name="BEIGE" value="Color(0.96, 0.96, 0.86, 1)">
			Beige color.
		</constant>
		<constant name="BISQUE" value="Color(1, 0.89, 0.77, 1)">
			Bisque color.
		</constant>
		<constant name="BLACK" value="Color(0, 0, 0, 1)">
			Black color.
		</constant>
		<constant name="BLANCHED_ALMOND" value="Color(1, 0.92, 0.8, 1)">
			Blanched almond color.
		</constant>
		<constant name="BLUE" value="Color(0, 0, 1, 1)">
			Blue color.
		</constant>
		<constant name="BLUE_VIOLET" value="Color(0.54, 0.17, 0.89, 1)">
			Blue violet color.
		</constant>
		<constant name="BROWN" value="Color(0.65, 0.16, 0.16, 1)">
			Brown color.
		</constant>
		<constant name="BURLYWOOD" value="Color(0.87, 0.72, 0.53, 1)">
			Burlywood color.
		</constant>
		<constant name="CADET_BLUE" value="Color(0.37, 0.62, 0.63, 1)">
			Cadet blue color.
		</constant>
		<constant name="CHARTREUSE" value="Color(0.5, 1, 0, 1)">
			Chartreuse color.
		</constant>
		<constant name="CHOCOLATE" value="Color(0.82, 0.41, 0.12, 1)">
			Chocolate color.
		</constant>
		<constant name="CORAL" value="Color(1, 0.5, 0.31, 1)">
			Coral color.
		</constant>
		<constant name="CORNFLOWER_BLUE" value="Color(0.39, 0.58, 0.93, 1)">
			Cornflower blue color.
		</constant>
		<constant name="CORNSILK" value="Color(1, 0.97, 0.86, 1)">
			Cornsilk color.
		</constant>
		<constant name="CRIMSON" value="Color(0.86, 0.08, 0.24, 1)">
			Crimson color.
		</constant>
		<constant name="CYAN" value="Color(0, 1, 1, 1)">
			Cyan color.
		</constant>
		<constant name="DARK_BLUE" value="Color(0, 0, 0.55, 1)">
			Dark blue color.
		</constant>
		<constant name="DARK_CYAN" value="Color(0, 0.55, 0.55, 1)">
			Dark cyan color.
		</constant>
		<constant name="DARK_GOLDENROD" value="Color(0.72, 0.53, 0.04, 1)">
			Dark goldenrod color.
		</constant>
		<constant name="DARK_GRAY" value="Color(0.66, 0.66, 0.66, 1)">
			Dark gray color.
		</constant>
		<constant name="DARK_GREEN" value="Color(0, 0.39, 0, 1)">
			Dark green color.
		</constant>
		<constant name="DARK_KHAKI" value="Color(0.74, 0.72, 0.42, 1)">
			Dark khaki color.
		</constant>
		<constant name="DARK_MAGENTA" value="Color(0.55, 0, 0.55, 1)">
			Dark magenta color.
		</constant>
		<constant name="DARK_OLIVE_GREEN" value="Color(0.33, 0.42, 0.18, 1)">
			Dark olive green color.
		</constant>
		<constant name="DARK_ORANGE" value="Color(1, 0.55, 0, 1)">
			Dark orange color.
		</constant>
		<constant name="DARK_ORCHID" value="Color(0.6, 0.2, 0.8, 1)">
			Dark orchid color.
		</constant>
		<constant name="DARK_RED" value="Color(0.55, 0, 0, 1)">
			Dark red color.
		</constant>
		<constant name="DARK_SALMON" value="Color(0.91, 0.59, 0.48, 1)">
			Dark salmon color.
		</constant>
		<constant name="DARK_SEA_GREEN" value="Color(0.56, 0.74, 0.56, 1)">
			Dark sea green color.
		</constant>
		<constant name="DARK_SLATE_BLUE" value="Color(0.28, 0.24, 0.55, 1)">
			Dark slate blue color.
		</constant>
		<constant name="DARK_SLATE_GRAY" value="Color(0.18, 0.31, 0.31, 1)">
			Dark slate gray color.
		</constant>
		<constant name="DARK_TURQUOISE" value="Color(0, 0.81, 0.82, 1)">
			Dark turquoise color.
		</constant>
		<constant name="DARK_VIOLET" value="Color(0.58, 0, 0.83, 1)">
			Dark violet color.
		</constant>
		<constant name="DEEP_PINK" value="Color(1, 0.08, 0.58, 1)">
			Deep pink color.
		</constant>
		<constant name="DEEP_SKY_BLUE" value="Color(0, 0.75, 1, 1)">
			Deep sky blue color.
		</constant>
		<constant name="DIM_GRAY" value="Color(0.41, 0.41, 0.41, 1)">
			Dim gray color.
		</constant>
		<constant name="DODGER_BLUE" value="Color(0.12, 0.56, 1, 1)">
			Dodger blue color.
		</constant>
		<constant name="FIREBRICK" value="Color(0.7, 0.13, 0.13, 1)">
			Firebrick color.
		</constant>
		<constant name="FLORAL_WHITE" value="Color(1, 0.98, 0.94, 1)">
			Floral white color.
		</constant>
		<constant name="FOREST_GREEN" value="Color(0.13, 0.55, 0.13, 1)">
			Forest green color.
		</constant>
		<constant name="FUCHSIA" value="Color(1, 0, 1, 1)">
			Fuchsia color.
		</constant>
		<constant name="GAINSBORO" value="Color(0.86, 0.86, 0.86, 1)">
			Gainsboro color.
		</constant>
		<constant name="GHOST_WHITE" value="Color(0.97, 0.97, 1, 1)">
			Ghost white color.
		</constant>
		<constant name="GOLD" value="Color(1, 0.84, 0, 1)">
			Gold color.
		</constant>
		<constant name="GOLDENROD" value="Color(0.85, 0.65, 0.13, 1)">
			Goldenrod color.
		</constant>
		<constant name="GRAY" value="Color(0.75, 0.75, 0.75, 1)">
			Gray color.
		</constant>
		<constant name="GREEN" value="Color(0, 1, 0, 1)">
			Green color.
		</constant>
		<constant name="GREEN_YELLOW" value="Color(0.68, 1, 0.18, 1)">
			Green yellow color.
		</constant>
		<constant name="HONEYDEW" value="Color(0.94, 1, 0.94, 1)">
			Honeydew color.
		</constant>
		<constant name="HOT_PINK" value="Color(1, 0.41, 0.71, 1)">
			Hot pink color.
		</constant>
		<constant name="INDIAN_RED" value="Color(0.8, 0.36, 0.36, 1)">
			Indian red color.
		</constant>
		<constant name="INDIGO" value="Color(0.29, 0, 0.51, 1)">
			Indigo color.
		</constant>
		<constant name="IVORY" value="Color(1, 1, 0.94, 1)">
			Ivory color.
		</constant>
		<constant name="KHAKI" value="Color(0.94, 0.9, 0.55, 1)">
			Khaki color.
		</constant>
		<constant name="LAVENDER" value="Color(0.9, 0.9, 0.98, 1)">
			Lavender color.
		</constant>
		<constant name="LAVENDER_BLUSH" value="Color(1, 0.94, 0.96, 1)">
			Lavender blush color.
		</constant>
		<constant name="LAWN_GREEN" value="Color(0.49, 0.99, 0, 1)">
			Lawn green color.
		</constant>
		<constant name="LEMON_CHIFFON" value="Color(1, 0.98, 0.8, 1)">
			Lemon chiffon color.
		</constant>
		<constant name="LIGHT_BLUE" value="Color(0.68, 0.85, 0.9, 1)">
			Light blue color.
		</constant>
		<constant name="LIGHT_CORAL" value="Color(0.94, 0.5, 0.5, 1)">
			Light coral color.
		</constant>
		<constant name="LIGHT_CYAN" value="Color(0.88, 1, 1, 1)">
			Light cyan color.
		</constant>
		<constant name="LIGHT_GOLDENROD" value="Color(0.98, 0.98, 0.82, 1)">
			Light goldenrod color.
		</constant>
		<constant name="LIGHT_GRAY" value="Color(0.83, 0.83, 0.83, 1)">
			Light gray color.
		</constant>
		<constant name="LIGHT_GREEN" value="Color(0.56, 0.93, 0.56, 1)">
			Light green color.
		</constant>
		<constant name="LIGHT_PINK" value="Color(1, 0.71, 0.76, 1)">
			Light pink color.
		</constant>
		<constant name="LIGHT_SALMON" value="Color(1, 0.63, 0.48, 1)">
			Light salmon color.
		</constant>
		<constant name="LIGHT_SEA_GREEN" value="Color(0.13, 0.7, 0.67, 1)">
			Light sea green color.
		</constant>
		<constant name="LIGHT_SKY_BLUE" value="Color(0.53, 0.81, 0.98, 1)">
			Light sky blue color.
		</constant>
		<constant name="LIGHT_SLATE_GRAY" value="Color(0.47, 0.53, 0.6, 1)">
			Light slate gray color.
		</constant>
		<constant name="LIGHT_STEEL_BLUE" value="Color(0.69, 0.77, 0.87, 1)">
			Light steel blue color.
		</constant>
		<constant name="LIGHT_YELLOW" value="Color(1, 1, 0.88, 1)">
			Light yellow color.
		</constant>
		<constant name="LIME" value="Color(0, 1, 0, 1)">
			Lime color.
		</constant>
		<constant name="LIME_GREEN" value="Color(0.2, 0.8, 0.2, 1)">
			Lime green color.
		</constant>
		<constant name="LINEN" value="Color(0.98, 0.94, 0.9, 1)">
			Linen color.
		</constant>
		<constant name="MAGENTA" value="Color(1, 0, 1, 1)">
			Magenta color.
		</constant>
		<constant name="MAROON" value="Color(0.69, 0.19, 0.38, 1)">
			Maroon color.
		</constant>
		<constant name="MEDIUM_AQUAMARINE" value="Color(0.4, 0.8, 0.67, 1)">
			Medium aquamarine color.
		</constant>
		<constant name="MEDIUM_BLUE" value="Color(0, 0, 0.8, 1)">
			Medium blue color.
		</constant>
		<constant name="MEDIUM_ORCHID" value="Color(0.73, 0.33, 0.83, 1)">
			Medium orchid color.
		</constant>
		<constant name="MEDIUM_PURPLE" value="Color(0.58, 0.44, 0.86, 1)">
			Medium purple color.
		</constant>
		<constant name="MEDIUM_SEA_GREEN" value="Color(0.24, 0.7, 0.44, 1)">
			Medium sea green color.
		</constant>
		<constant name="MEDIUM_SLATE_BLUE" value="Color(0.48, 0.41, 0.93, 1)">
			Medium slate blue color.
		</constant>
		<constant name="MEDIUM_SPRING_GREEN" value="Color(0, 0.98, 0.6, 1)">
			Medium spring green color.
		</constant>
		<constant name="MEDIUM_TURQUOISE" value="Color(0.28, 0.82, 0.8, 1)">
			Medium turquoise color.
		</constant>
		<constant name="MEDIUM_VIOLET_RED" value="Color(0.78, 0.08, 0.52, 1)">
			Medium violet red color.
		</constant>
		<constant name="MIDNIGHT_BLUE" value="Color(0.1, 0.1, 0.44, 1)">
			Midnight blue color.
		</constant>
		<constant name="MINT_CREAM" value="Color(0.96, 1, 0.98, 1)">
			Mint cream color.
		</constant>
		<constant name="MISTY_ROSE" value="Color(1, 0.89, 0.88, 1)">
			Misty rose color.
		</constant>
		<constant name="MOCCASIN" value="Color(1, 0.89, 0.71, 1)">
			Moccasin color.
		</constant>
		<constant name="NAVAJO_WHITE" value="Color(1, 0.87, 0.68, 1)">
			Navajo white color.
		</constant>
		<constant name="NAVY_BLUE" value="Color(0, 0, 0.5, 1)">
			Navy blue color.
		</constant>
		<constant name="OLD_LACE" value="Color(0.99, 0.96, 0.9, 1)">
			Old lace color.
		</constant>
		<constant name="OLIVE" value="Color(0.5, 0.5, 0, 1)">
			Olive color.
		</constant>
		<constant name="OLIVE_DRAB" value="Color(0.42, 0.56, 0.14, 1)">
			Olive drab color.
		</constant>
		<constant name="ORANGE" value="Color(1, 0.65, 0, 1)">
			Orange color.
		</constant>
		<constant name="ORANGE_RED" value="Color(1, 0.27, 0, 1)">
			Orange red color.
		</constant>
		<constant name="ORCHID" value="Color(0.85, 0.44, 0.84, 1)">
			Orchid color.
		</constant>
		<constant name="PALE_GOLDENROD" value="Color(0.93, 0.91, 0.67, 1)">
			Pale goldenrod color.
		</constant>
		<constant name="PALE_GREEN" value="Color(0.6, 0.98, 0.6, 1)">
			Pale green color.
		</constant>
		<constant name="PALE_TURQUOISE" value="Color(0.69, 0.93, 0.93, 1)">
			Pale turquoise color.
		</constant>
		<constant name="PALE_VIOLET_RED" value="Color(0.86, 0.44, 0.58, 1)">
			Pale violet red color.
		</constant>
		<constant name="PAPAYA_WHIP" value="Color(1, 0.94, 0.84, 1)">
			Papaya whip color.
		</constant>
		<constant name="PEACH_PUFF" value="Color(1, 0.85, 0.73, 1)">
			Peach puff color.
		</constant>
		<constant name="PERU" value="Color(0.8, 0.52, 0.25, 1)">
			Peru color.
		</constant>
		<constant name="PINK" value="Color(1, 0.75, 0.8, 1)">
			Pink color.
		</constant>
		<constant name="PLUM" value="Color(0.87, 0.63, 0.87, 1)">
			Plum color.
		</constant>
		<constant name="POWDER_BLUE" value="Color(0.69, 0.88, 0.9, 1)">
			Powder blue color.
		</constant>
		<constant name="PURPLE" value="Color(0.63, 0.13, 0.94, 1)">
			Purple color.
		</constant>
		<constant name="REBECCA_PURPLE" value="Color(0.4, 0.2, 0.6, 1)">
			Rebecca purple color.
		</constant>
		<constant name="RED" value="Color(1, 0, 0, 1)">
			Red color.
		</constant>
		<constant name="ROSY_BROWN" value="Color(0.74, 0.56, 0.56, 1)">
			Rosy brown color.
		</constant>
		<constant name="ROYAL_BLUE" value="Color(0.25, 0.41, 0.88, 1)">
			Royal blue color.
		</constant>
		<constant name="SADDLE_BROWN" value="Color(0.55, 0.27, 0.07, 1)">
			Saddle brown color.
		</constant>
		<constant name="SALMON" value="Color(0.98, 0.5, 0.45, 1)">
			Salmon color.
		</constant>
		<constant name="SANDY_BROWN" value="Color(0.96, 0.64, 0.38, 1)">
			Sandy brown color.
		</constant>
		<constant name="SEA_GREEN" value="Color(0.18, 0.55, 0.34, 1)">
			Sea green color.
		</constant>
		<constant name="SEASHELL" value="Color(1, 0.96, 0.93, 1)">
			Seashell color.
		</constant>
		<constant name="SIENNA" value="Color(0.63, 0.32, 0.18, 1)">
			Sienna color.
		</constant>
		<constant name="SILVER" value="Color(0.75, 0.75, 0.75, 1)">
			Silver color.
		</constant>
		<constant name="SKY_BLUE" value="Color(0.53, 0.81, 0.92, 1)">
			Sky blue color.
		</constant>
		<constant name="SLATE_BLUE" value="Color(0.42, 0.35, 0.8, 1)">
			Slate blue color.
		</constant>
		<constant name="SLATE_GRAY" value="Color(0.44, 0.5, 0.56, 1)">
			Slate gray color.
		</constant>
		<constant name="SNOW" value="Color(1, 0.98, 0.98, 1)">
			Snow color.
		</constant>
		<constant name="SPRING_GREEN" value="Color(0, 1, 0.5, 1)">
			Spring green color.
		</constant>
		<constant name="STEEL_BLUE" value="Color(0.27, 0.51, 0.71, 1)">
			Steel blue color.
		</constant>
		<constant name="TAN" value="Color(0.82, 0.71, 0.55, 1)">
			Tan color.
		</constant>
		<constant name="TEAL" value="Color(0, 0.5, 0.5, 1)">
			Teal color.
		</constant>
		<constant name="THISTLE" value="Color(0.85, 0.75, 0.85, 1)">
			Thistle color.
		</constant>
		<constant name="TOMATO" value="Color(1, 0.39, 0.28, 1)">
			Tomato color.
		</constant>
		<constant name="TRANSPARENT" value="Color(1, 1, 1, 0)">
			Transparent color (white with zero alpha).
		</constant>
		<constant name="TURQUOISE" value="Color(0.25, 0.88, 0.82, 1)">
			Turquoise color.
		</constant>
		<constant name="VIOLET" value="Color(0.93, 0.51, 0.93, 1)">
			Violet color.
		</constant>
		<constant name="WEB_GRAY" value="Color(0.5, 0.5, 0.5, 1)">
			Web gray color.
		</constant>
		<constant name="WEB_GREEN" value="Color(0, 0.5, 0, 1)">
			Web green color.
		</constant>
		<constant name="WEB_MAROON" value="Color(0.5, 0, 0, 1)">
			Web maroon color.
		</constant>
		<constant name="WEB_PURPLE" value="Color(0.5, 0, 0.5, 1)">
			Web purple color.
		</constant>
		<constant name="WHEAT" value="Color(0.96, 0.87, 0.7, 1)">
			Wheat color.
		</constant>
		<constant name="WHITE" value="Color(1, 1, 1, 1)">
			White color.
		</constant>
		<constant name="WHITE_SMOKE" value="Color(0.96, 0.96, 0.96, 1)">
			White smoke color.
		</constant>
		<constant name="YELLOW" value="Color(1, 1, 0, 1)">
			Yellow color.
		</constant>
		<constant name="YELLOW_GREEN" value="Color(0.6, 0.8, 0.2, 1)">
			Yellow green color.
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<description>
			</description>
		</operator>
		<operator name="operator !=">
			<return type="bool" />
			<argument index="0" name="right" type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Color" />
			<argument index="0" name="right" type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Color" />
			<argument index="0" name="right" type="float" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Color" />
			<argument index="0" name="right" type="int" />
			<description>
			</description>
		</operator>
		<operator name="operator +">
			<return type="Color" />
			<argument index="0" name="right" type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator -">
			<return type="Color" />
			<argument index="0" name="right" type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator /">
			<return type="Color" />
			<argument index="0" name="right" type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator /">
			<return type="Color" />
			<argument index="0" name="right" type="float" />
			<description>
			</description>
		</operator>
		<operator name="operator /">
			<return type="Color" />
			<argument index="0" name="right" type="int" />
			<description>
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<description>
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<argument index="0" name="right" type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator []">
			<return type="float" />
			<argument index="0" name="index" type="int" />
			<description>
			</description>
		</operator>
		<operator name="operator unary+">
			<return type="Color" />
			<description>
			</description>
		</operator>
		<operator name="operator unary-">
			<return type="Color" />
			<description>
			</description>
		</operator>
	</operators>
</class>
