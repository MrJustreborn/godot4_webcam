<?xml version="1.0" encoding="UTF-8" ?>
<class name="Container" inherits="Control" version="4.0">
	<brief_description>
		Base node for containers.
	</brief_description>
	<description>
		Base node for containers. A [Container] contains other controls and automatically arranges them in a certain way.
		A Control can inherit this to create custom container classes.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="fit_child_in_rect">
			<return type="void" />
			<argument index="0" name="child" type="Control" />
			<argument index="1" name="rect" type="Rect2" />
			<description>
				Fit a child control in a given rect. This is mainly a helper for creating custom container classes.
			</description>
		</method>
		<method name="queue_sort">
			<return type="void" />
			<description>
				Queue resort of the contained children. This is called automatically anyway, but can be called upon request.
			</description>
		</method>
	</methods>
	<members>
		<member name="mouse_filter" type="int" setter="set_mouse_filter" getter="get_mouse_filter" override="true" enum="Control.MouseFilter" default="1" />
	</members>
	<signals>
		<signal name="pre_sort_children">
			<description>
				Emitted when children are going to be sorted.
			</description>
		</signal>
		<signal name="sort_children">
			<description>
				Emitted when sorting the children is needed.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_PRE_SORT_CHILDREN" value="50">
			Notification just before children are going to be sorted, in case there's something to process beforehand.
		</constant>
		<constant name="NOTIFICATION_SORT_CHILDREN" value="51">
			Notification for when sorting the children, it must be obeyed immediately.
		</constant>
	</constants>
</class>
