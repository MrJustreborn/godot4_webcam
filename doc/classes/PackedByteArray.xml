<?xml version="1.0" encoding="UTF-8" ?>
<class name="PackedByteArray" version="4.0">
	<brief_description>
		A packed [Array] of bytes.
	</brief_description>
	<description>
		An [Array] specifically designed to hold bytes. Packs data tightly, so it saves memory for large array sizes.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="PackedByteArray" qualifiers="constructor">
			<return type="PackedByteArray" />
			<description>
				Constructs an empty [PackedByteArray].
			</description>
		</method>
		<method name="PackedByteArray" qualifiers="constructor">
			<return type="PackedByteArray" />
			<argument index="0" name="from" type="PackedByteArray" />
			<description>
				Constructs a [PackedByteArray] as a copy of the given [PackedByteArray].
			</description>
		</method>
		<method name="PackedByteArray" qualifiers="constructor">
			<return type="PackedByteArray" />
			<argument index="0" name="from" type="Array" />
			<description>
				Constructs a new [PackedByteArray]. Optionally, you can pass in a generic [Array] that will be converted.
			</description>
		</method>
		<method name="append">
			<return type="bool" />
			<argument index="0" name="value" type="int" />
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<return type="void" />
			<argument index="0" name="array" type="PackedByteArray" />
			<description>
				Appends a [PackedByteArray] at the end of this array.
			</description>
		</method>
		<method name="bsearch">
			<return type="int" />
			<argument index="0" name="value" type="int" />
			<argument index="1" name="before" type="bool" default="true" />
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array.
				[b]Note:[/b] Calling [method bsearch] on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="compress" qualifiers="const">
			<return type="PackedByteArray" />
			<argument index="0" name="compression_mode" type="int" default="0" />
			<description>
				Returns a new [PackedByteArray] with the data compressed. Set the compression mode using one of [enum File.CompressionMode]'s constants.
			</description>
		</method>
		<method name="decode_double" qualifiers="const">
			<return type="float" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_float" qualifiers="const">
			<return type="float" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_half" qualifiers="const">
			<return type="float" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_s16" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_s32" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_s64" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_s8" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_u16" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_u32" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_u64" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_u8" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<description>
			</description>
		</method>
		<method name="decode_var" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="allow_objects" type="bool" default="false" />
			<description>
			</description>
		</method>
		<method name="decode_var_size" qualifiers="const">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="allow_objects" type="bool" default="false" />
			<description>
			</description>
		</method>
		<method name="decompress" qualifiers="const">
			<return type="PackedByteArray" />
			<argument index="0" name="buffer_size" type="int" />
			<argument index="1" name="compression_mode" type="int" default="0" />
			<description>
				Returns a new [PackedByteArray] with the data decompressed. Set [code]buffer_size[/code] to the size of the uncompressed data. Set the compression mode using one of [enum File.CompressionMode]'s constants.
			</description>
		</method>
		<method name="decompress_dynamic" qualifiers="const">
			<return type="PackedByteArray" />
			<argument index="0" name="max_output_size" type="int" />
			<argument index="1" name="compression_mode" type="int" default="0" />
			<description>
				Returns a new [PackedByteArray] with the data decompressed. Set the compression mode using one of [enum File.CompressionMode]'s constants. [b]This method only accepts gzip and deflate compression modes.[/b]
				This method is potentially slower than [code]decompress[/code], as it may have to re-allocate its output buffer multiple times while decompressing, whereas [code]decompress[/code] knows it's output buffer size from the beginning.
				GZIP has a maximal compression ratio of 1032:1, meaning it's very possible for a small compressed payload to decompress to a potentially very large output. To guard against this, you may provide a maximum size this function is allowed to allocate in bytes via [code]max_output_size[/code]. Passing -1 will allow for unbounded output. If any positive value is passed, and the decompression exceeds that amount in bytes, then an error will be returned.
			</description>
		</method>
		<method name="duplicate">
			<return type="PackedByteArray" />
			<description>
				Creates a copy of the array, and returns it.
			</description>
		</method>
		<method name="encode_double">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="float" />
			<description>
			</description>
		</method>
		<method name="encode_float">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="float" />
			<description>
			</description>
		</method>
		<method name="encode_half">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="float" />
			<description>
			</description>
		</method>
		<method name="encode_s16">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_s32">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_s64">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_s8">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_u16">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_u32">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_u64">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_u8">
			<return type="void" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
			</description>
		</method>
		<method name="encode_var">
			<return type="int" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="value" type="Variant" />
			<argument index="2" name="allow_objects" type="bool" default="false" />
			<description>
			</description>
		</method>
		<method name="fill">
			<return type="void" />
			<argument index="0" name="value" type="int" />
			<description>
				Assigns the given value to all elements in the array. This can typically be used together with [method resize] to create an array with a given size and initialized elements.
			</description>
		</method>
		<method name="get_string_from_ascii" qualifiers="const">
			<return type="String" />
			<description>
				Converts ASCII/Latin-1 encoded array to [String]. Fast alternative to [method get_string_from_utf8] if the content is ASCII/Latin-1 only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method get_string_from_utf8].
			</description>
		</method>
		<method name="get_string_from_utf16" qualifiers="const">
			<return type="String" />
			<description>
				Converts UTF-16 encoded array to [String]. If the BOM is missing, system endianness is assumed. Returns empty string if source array is not valid UTF-16 string.
			</description>
		</method>
		<method name="get_string_from_utf32" qualifiers="const">
			<return type="String" />
			<description>
				Converts UTF-32 encoded array to [String]. System endianness is assumed. Returns empty string if source array is not valid UTF-32 string.
			</description>
		</method>
		<method name="get_string_from_utf8" qualifiers="const">
			<return type="String" />
			<description>
				Converts UTF-8 encoded array to [String]. Slower than [method get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred. Returns empty string if source array is not valid UTF-8 string.
			</description>
		</method>
		<method name="has" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="value" type="int" />
			<description>
				Returns [code]true[/code] if the array contains [code]value[/code].
			</description>
		</method>
		<method name="has_encoded_var" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="byte_offset" type="int" />
			<argument index="1" name="allow_objects" type="bool" default="false" />
			<description>
			</description>
		</method>
		<method name="hex_encode" qualifiers="const">
			<return type="String" />
			<description>
				Returns a hexadecimal representation of this array as a [String].
				[codeblocks]
				[gdscript]
				var array = PackedByteArray([11, 46, 255])
				print(array.hex_encode()) # Prints: 0b2eff
				[/gdscript]
				[csharp]
				var array = new byte[] {11, 46, 255};
				GD.Print(array.HexEncode()); // Prints: 0b2eff
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="insert">
			<return type="int" />
			<argument index="0" name="at_index" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code]).
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="operator !=" qualifiers="operator">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="operator !=" qualifiers="operator">
			<return type="bool" />
			<argument index="0" name="right" type="PackedByteArray" />
			<description>
			</description>
		</method>
		<method name="operator +" qualifiers="operator">
			<return type="PackedByteArray" />
			<argument index="0" name="right" type="PackedByteArray" />
			<description>
			</description>
		</method>
		<method name="operator ==" qualifiers="operator">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="operator ==" qualifiers="operator">
			<return type="bool" />
			<argument index="0" name="right" type="PackedByteArray" />
			<description>
			</description>
		</method>
		<method name="operator []" qualifiers="operator">
			<return type="int" />
			<argument index="0" name="index" type="int" />
			<description>
			</description>
		</method>
		<method name="push_back">
			<return type="bool" />
			<argument index="0" name="value" type="int" />
			<description>
				Appends an element at the end of the array.
			</description>
		</method>
		<method name="remove">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Removes an element from the array by index.
			</description>
		</method>
		<method name="resize">
			<return type="int" />
			<argument index="0" name="new_size" type="int" />
			<description>
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.
			</description>
		</method>
		<method name="reverse">
			<return type="void" />
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="set">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
				Changes the byte at the given index.
			</description>
		</method>
		<method name="size" qualifiers="const">
			<return type="int" />
			<description>
				Returns the size of the array.
			</description>
		</method>
		<method name="sort">
			<return type="void" />
			<description>
				Sorts the elements of the array in ascending order.
			</description>
		</method>
		<method name="subarray" qualifiers="const">
			<return type="PackedByteArray" />
			<argument index="0" name="from" type="int" />
			<argument index="1" name="to" type="int" />
			<description>
				Returns the slice of the [PackedByteArray] between indices (inclusive) as a new [PackedByteArray]. Any negative index is considered to be from the end of the array.
			</description>
		</method>
		<method name="to_float32_array" qualifiers="const">
			<return type="PackedFloat32Array" />
			<description>
				Returns a copy of the data converted to a [PackedFloat32Array], where each block of 4 bytes has been converted to a 32-bit float (C++ [code]float[/code]).
				The size of the new array will be [code]byte_array.size() / 4[/code].
				If the original data can't be converted to 32-bit floats, the resulting data is undefined.
			</description>
		</method>
		<method name="to_float64_array" qualifiers="const">
			<return type="PackedFloat64Array" />
			<description>
				Returns a copy of the data converted to a [PackedFloat64Array], where each block of 8 bytes has been converted to a 64-bit float (C++ [code]double[/code], Godot [float]).
				The size of the new array will be [code]byte_array.size() / 8[/code].
				If the original data can't be converted to 64-bit floats, the resulting data is undefined.
			</description>
		</method>
		<method name="to_int32_array" qualifiers="const">
			<return type="PackedInt32Array" />
			<description>
				Returns a copy of the data converted to a [PackedInt32Array], where each block of 4 bytes has been converted to a signed 32-bit integer (C++ [code]int32_t[/code]).
				The size of the new array will be [code]byte_array.size() / 4[/code].
				If the original data can't be converted to signed 32-bit integers, the resulting data is undefined.
			</description>
		</method>
		<method name="to_int64_array" qualifiers="const">
			<return type="PackedInt64Array" />
			<description>
				Returns a copy of the data converted to a [PackedInt64Array], where each block of 4 bytes has been converted to a signed 64-bit integer (C++ [code]int64_t[/code], Godot [int]).
				The size of the new array will be [code]byte_array.size() / 8[/code].
				If the original data can't be converted to signed 64-bit integers, the resulting data is undefined.
			</description>
		</method>
	</methods>
</class>
